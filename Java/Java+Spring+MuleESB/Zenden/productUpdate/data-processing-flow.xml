<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd">
	<configuration doc:name="Configuration">
    	<expression-language>
        	<global-functions>
            	def subString(value,start,end) {
                	return org.apache.commons.lang3.StringUtils.substring(value,start,end);
            	}
            	def getHoursFromTime(value) {
            		String hours = (org.apache.commons.lang3.StringUtils.substring(value, 0, value.indexOf(':')));
            		return (hours.length() == 1) ? ("0" + hours) : hours;
            	}
            	def urlEncode(value) {
            		org.apache.commons.codec.net.URLCodec codec = new org.apache.commons.codec.net.URLCodec();
            		return codec.encode(value, "UTF-8").replace("+", "%20");
            	}
            	def subString(value,start) {
            		return org.apache.commons.lang3.StringUtils.substring(value,start);
            	}
        	</global-functions>
    	</expression-language>
    </configuration>
    <spring:beans>
    	<spring:bean
    	 class="com.starfish.muleesb.services.converters.MessageToDictionaryConverter"
    	 name="messageToDictionaryConverter"/>
		
    	<spring:bean
    	 class="com.starfish.muleesb.services.converters.ProductUpdateGuidToValueConverter"
    	 name="guidToValueConverter"/>
		
    	<spring:bean
    	 class="com.starfish.muleesb.services.combiners.ProductListCombiner"
    	 name="productListCombiner"/>
		
    	<spring:bean
    	 class="com.starfish.muleesb.services.converters.ProductForUpdateToJsonConverter"
    	 name="productForUpdateToJsonConverter"/>
		
    	<spring:bean
    	 class="com.starfish.muleesb.services.converters.ProductListSplitter"
    	 name="productListSplitter"/>
    	
		<spring:bean name="nonNullMapper" class="org.codehaus.jackson.map.ObjectMapper">
			<spring:property name="SerializationInclusion">
				<spring:value type="org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion">NON_NULL</spring:value>
			</spring:property>
		</spring:bean>
		
		<spring:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        	<spring:property name="driverClassName" value="${datasource.driver}"/>
        	<spring:property name="url" value="${datasource.url}"/>
        	<spring:property name="username" value="${datasource.username}"/>
        	<spring:property name="password" value="${datasource.password}"/>
    	</spring:bean>
		
    	<context:component-scan base-package="com.starfish.muleesb"/>
    </spring:beans>
    <db:generic-config name="Generic_Database_Configuration"  doc:name="Generic Database Configuration" driverClassName="${datasource.driver}" dataSource-ref="dataSource"/>
    <flow name="data-processing-flow" processingStrategy="synchronous">
        <vm:inbound-endpoint exchange-pattern="request-response" doc:name="VM" path="processDataForProductUpdate"/>
        <set-variable variableName="filename" value="#[message.inboundProperties.originalFilename]" doc:name="save-filename"/>
        <object-to-string-transformer doc:name="object-to-string"/>
        <set-variable variableName="flowStatus" value="PARSING" doc:name="set-flow-status"/>
        <set-variable variableName="source" value="#[payload]" doc:name="save-source"/>
        <set-payload value="#[subString(payload, payload.indexOf('&lt;?xml'))]" doc:name="fix-bom-in-xml"/>
        <custom-transformer class="com.starfish.muleesb.transformers.CustomXmlToJaxbObjectTransformer" doc:name="custom-xml-to-jaxb-object">
           	<spring:property name="beanName" value="productupdateJaxbContext"/>
        </custom-transformer>
        <set-variable variableName="parsedXmlMessage" value="#[payload]" doc:name="save-parsed-xml-message"/>
        <flow-ref name="product-update-db-flow" doc:name="product-update-db-flow"/>

        <invoke object-ref="guidToValueConverter" method="convert" methodArguments="#[flowVars.parsedXmlMessage.body.groups]" methodArgumentTypes="java.util.List" doc:name="convert-guids-to-values"/>
        <invoke object-ref="productListCombiner" method="combine" doc:name="combine-groups-to-list" methodArgumentTypes="java.util.List" methodArguments="#[payload]"/>
        <invoke object-ref="productForUpdateToJsonConverter" method="convert" doc:name="convert-for-json-data" methodArgumentTypes="java.util.List" methodArguments="#[payload]"/>
        <invoke object-ref="productListSplitter" method="split" doc:name="split-product-list" methodArgumentTypes="java.util.List" methodArguments="#[payload]"/>
        <set-variable variableName="savedPayload" value="#[payload]" doc:name="save-payload"/>
        <set-payload value="#[flowVars.source]" doc:name="restore-xml-data-to-payload"/>
        <file:outbound-endpoint path="/media/data/product/archived" outputPattern="#[flowVars.filename]" responseTimeout="10000" doc:name="save-xml-on-filesystem"/>
        <set-variable variableName="flowStatus" value="SENDING" doc:name="set-flow-status"/>
        <set-payload value="#[flowVars.savedPayload]" doc:name="restore-json-data-to-payload"/>
        <vm:outbound-endpoint exchange-pattern="request-response" path="sendDataToStarfish" doc:name="call-send-data-subflow"/>
        <catch-exception-strategy doc:name="catch-exception-strategy">
            <choice doc:name="check-flow-status">
                <when expression="#[flowVars.flowStatus=='PARSING']">
                    <scripting:transformer doc:name="print-stack-trace">
                        <scripting:script engine="Groovy">
                            <scripting:text><![CDATA[org.apache.log4j.Logger.getLogger("productUpdateLogger").error("Error Trace is : \n",exception)]]></scripting:text>
                        </scripting:script>
                    </scripting:transformer>
                    <set-payload value="#[flowVars.source]" doc:name="restore-xml-data-to-payload"/>
                    <file:outbound-endpoint path="/media/data/product/error" outputPattern="#[flowVars.filename]" responseTimeout="10000" doc:name="save-xml-on-filesystem"/>
                </when>
                <otherwise>
                    <scripting:transformer doc:name="print-stack-trace">
                        <scripting:script engine="Groovy">
                            <scripting:text><![CDATA[org.apache.log4j.Logger.getLogger("productUpdateLogger").error("Error Trace is : \n",exception)]]></scripting:text>
                        </scripting:script>
                    </scripting:transformer>
                </otherwise>
            </choice>
            <set-payload value="ERROR" doc:name="Set Payload"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="product-update-db-flow">
        <invoke object-ref="messageToDictionaryConverter" method="convert" methodArguments="#[payload]" methodArgumentTypes="com.starfish.muleesb.domain.productupdate.Message" doc:name="convert-data-for-db"/>
        <foreach doc:name="For Each">
            <set-variable variableName="currentData" value="#[payload]" doc:name="save-current-item-data"/>
            <db:select config-ref="Generic_Database_Configuration" doc:name="select-count-of-same-notes">
                <db:parameterized-query><![CDATA[SELECT d.id AS id, df.id AS fieldId FROM dictionary AS d INNER JOIN dictionaryfields df ON df.dictionaryid=d.id WHERE d.guid=#[flowVars.currentData.guid] AND df.name=#[flowVars.currentData.name];]]></db:parameterized-query>
            </db:select>
            <set-variable variableName="dictionaryId" value="#[payload.size() == 0 || payload.getFirst() == null ? 0 : payload.getFirst().id]" doc:name="set-dictionary-id"/>
            <set-variable variableName="dictionaryFieldId" value="#[payload.size() == 0 || payload.getFirst() == null ? 0 : payload.getFirst().fieldId]" doc:name="set-dictionary-field-id"/>
            <choice doc:name="update-or-insert">
                <when expression="#[flowVars.dictionaryFieldId == 0 || flowVars.dictionaryId == 0]">
                    <db:select config-ref="Generic_Database_Configuration" doc:name="select-dictionary-id">
                        <db:parameterized-query><![CDATA[SELECT d.id AS id FROM dictionary AS d WHERE d.guid=#[flowVars.currentData.guid];]]></db:parameterized-query>
                    </db:select>
                    <set-variable variableName="dictionaryId" value="#[payload.size() == 0 || payload.getFirst() == null ? 0 : payload.getFirst().id]" doc:name="save-dictionary-id"/>
                    <choice doc:name="if-need-insert-dictionary">
                        <when expression="#[flowVars.dictionaryId == 0]">
                            <db:insert config-ref="Generic_Database_Configuration" autoGeneratedKeys="true" autoGeneratedKeysColumnNames="id" doc:name="insert-dictionary">
                                <db:parameterized-query><![CDATA[INSERT INTO dictionary (guid, type) VALUES (#[flowVars.currentData.guid], #[flowVars.currentData.type]);]]></db:parameterized-query>
                            </db:insert>
                            <set-variable variableName="dictionaryId" value="#[payload.size() == 0 || payload.getFirst() == null ? 0 : payload.getFirst().id]" doc:name="set-dictionary-id"/>
                            <db:insert config-ref="Generic_Database_Configuration" doc:name="insert-dictionary-field">
                                <db:parameterized-query><![CDATA[INSERT INTO dictionaryfields (dictionaryid, name, value) VALUES (#[flowVars.dictionaryId], #[flowVars.currentData.name], #[flowVars.currentData.value]);]]></db:parameterized-query>
                            </db:insert>
                        </when>
                        <otherwise>
                            <db:insert config-ref="Generic_Database_Configuration" doc:name="insert-dictionary-field">
                                <db:parameterized-query><![CDATA[INSERT INTO dictionaryfields (dictionaryid, name, value) VALUES (#[flowVars.dictionaryId], #[flowVars.currentData.name], #[flowVars.currentData.value]);]]></db:parameterized-query>
                            </db:insert>
                        </otherwise>
                    </choice>
                </when>
                <otherwise>
                    <db:update config-ref="Generic_Database_Configuration" doc:name="update-note-in-db">
                        <db:parameterized-query><![CDATA[UPDATE dictionaryfields SET dictionaryid=#[flowVars.dictionaryId], name=#[flowVars.currentData.name], value=#[flowVars.currentData.value] WHERE id=#[flowVars.dictionaryFieldId];]]></db:parameterized-query>
                    </db:update>
                </otherwise>
            </choice>
        </foreach>
    </sub-flow>
</mule>
