<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:context="http://www.springframework.org/schema/context" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd">
    <configuration doc:name="Configuration">
    	<expression-language>
        	<global-functions>
            	def subString(value,start,end) {
                	return org.apache.commons.lang3.StringUtils.substring(value,start,end);
            	}
            	def getHoursFromTime(value) {
            		String hours = (org.apache.commons.lang3.StringUtils.substring(value, 0, value.indexOf(':')));
            		return (hours.length() == 1) ? ("0" + hours) : hours;
            	}
            	def urlEncode(value) {
            		org.apache.commons.codec.net.URLCodec codec = new org.apache.commons.codec.net.URLCodec();
            		return codec.encode(value, "UTF-8").replace("+", "%20");
            	}
            	def subString(value,start) {
            		return org.apache.commons.lang3.StringUtils.substring(value,start);
            	}
        	</global-functions>
    	</expression-language>
    </configuration>
    <spring:beans>
    	<spring:import resource="classpath:application-context.xml"/>
    	<spring:bean class="com.starfish.muleesb.config.CustomPropertiesProvider" name="customPropertiesProvider">
    		<spring:property name="locations">
    			<spring:list>
    				<spring:value>classpath:svyaznoy.properties</spring:value>
    				<spring:value>classpath:config.properties</spring:value>
    				<spring:value>classpath:ftp/prodFtp.properties</spring:value>
    				<spring:value>classpath:ftp/testFtp.properties</spring:value>
    				<spring:value>classpath:datasource.properties</spring:value>
    			</spring:list>
    		</spring:property>
    	</spring:bean>
    	<spring:bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
      		<spring:property name="dataSource" ref="dataSource" />
      		<spring:property name="changeLog" value="classpath:liquibase/db.changelog.xml" />
 		</spring:bean>
    </spring:beans>
    <http:listener-config name="http-localhost-listener-configuration" host="0.0.0.0" port="8081"  connectionIdleTimeout="60000" doc:name="HTTP Listener Configuration"/>
    <http:request-config name="HTTP_Svyaznoy_Request_Configuration" host="partner.sms" port="8080"  connectionIdleTimeout="60000" doc:name="HTTP Request Configuration"/>
    <flow name="svyaznoy-flow">
        <http:listener config-ref="http-localhost-listener-configuration" path="sms/send" doc:name="HTTP"/>
        <json:json-to-object-transformer returnClass="java.util.Map" doc:name="json-to-object"/>
        <choice doc:name="check-token-and-parameters">
            <when expression="#[message.inboundProperties.Authorization != ${svyaznoy_access_token} &amp;&amp; message.inboundProperties.'http.query.params'.access_token != ${svyaznoy_access_token}]">
                <message-properties-transformer doc:name="set-status-403">
                    <add-message-property key="http.status" value="403"/>
                </message-properties-transformer>
                <set-payload value="Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here." doc:name="clear-payload"/>
            </when>
            <when expression="#[payload.clientId == null || payload.clientId == &quot;&quot; || payload.secretKey == null || payload.secretKey == &quot;&quot;]">
                <message-properties-transformer doc:name="set-status-400">
                    <add-message-property key="http.status" value="400"/>
                </message-properties-transformer>
                <set-payload value="error" doc:name="clear-payload"/>
            </when>
            <otherwise>
                <set-variable variableName="convertedSendAfter" value="#[getHoursFromTime(payload.sendAfter)]" doc:name="convert-send-after-variable"/>
                <set-variable variableName="convertedSendBefore" value="#[getHoursFromTime(payload.sendBefore)]" doc:name="convert-send-before-variable"/>
                <expression-transformer expression="#['clientId='+payload.recipient+'&amp;message='+urlEncode(payload.message)+'&amp;pass='+payload.secretKey+'&amp;serviceId='+payload.clientId+'&amp;sending_time='+flowVars.convertedSendAfter+'_'+flowVars.convertedSendBefore+'&amp;output=xml']" doc:name="convert-data-for-svyaznoy-service"/>
                <set-property propertyName="Content-Type" value="application/x-www-form-urlencoded" doc:name="set-content-type"/>
                <http:request config-ref="HTTP_Svyaznoy_Request_Configuration" path="/send" method="POST" doc:name="send-request-to-svyaznoy-service">
                    <http:success-status-code-validator values="200,500"/>
                </http:request>
                <choice doc:name="check-response-status">
                    <when expression="#[message.inboundProperties.'http.status' == 200]">
                        <object-to-string-transformer doc:name="object-to-string"/>
                        <custom-transformer class="com.starfish.muleesb.transformers.CustomXmlToJaxbObjectTransformer" doc:name="custom-xml-to-jaxb-object">
           					<spring:property name="beanName" value="svyaznoyJaxbContext"/>
        				</custom-transformer>
                        <choice doc:name="check-response-code">
                            <when expression="#[payload.code == 200]">
                                <set-property propertyName="Content-Type" value="application/json" doc:name="set-content-type"/>
                                <expression-transformer expression="#[{'result':payload.payload.id.toString(), 'message': 'Sms task was planned. Task id in \&quot;result\&quot;', 'success': true}]" doc:name="set-payload-on-success"/>
                                <json:object-to-json-transformer doc:name="object-to-json"/>
                            </when>
                            <when expression="#[payload.code == 400]">
                                <message-properties-transformer doc:name="set-http-status-400">
                                    <add-message-property key="http.status" value="400"/>
                                </message-properties-transformer>
                                <set-payload doc:name="set-payload" value="Bad request"/>
                            </when>
                            <when expression="#[payload.code == 401]">
                                <message-properties-transformer doc:name="set-http-status-401">
                                    <add-message-property key="http.status" value="400"/>
                                </message-properties-transformer>
                                <set-payload doc:name="set-payload" value="Incorrect serviceId/pass"/>
                            </when>
                            <when expression="#[payload.code == 402]">
                                <message-properties-transformer doc:name="set-http-status-402">
                                    <add-message-property key="http.status" value="402"/>
                                </message-properties-transformer>
                                <set-payload doc:name="set-payload" value="Payment required"/>
                            </when>
                            <when expression="#[payload.code == 403]">
                                <message-properties-transformer doc:name="set-http-status-403">
                                    <add-message-property key="http.status" value="400"/>
                                </message-properties-transformer>
                                <set-payload doc:name="set-payload" value="Current serviceId is not allowed"/>
                            </when>
                            <when expression="#[payload.code == 406]">
                                <message-properties-transformer doc:name="set-http-status-406">
                                    <add-message-property key="http.status" value="400"/>
                                </message-properties-transformer>
                                <set-payload doc:name="set-payload" value="clientId is incorrect"/>
                            </when>
                            <when expression="#[payload.code == 408]">
                                <message-properties-transformer doc:name="set-http-status-408">
                                    <add-message-property key="http.status" value="429"/>
                                </message-properties-transformer>
                                <set-payload doc:name="set-payload" value="Too many requests"/>
                            </when>
                            <when expression="#[payload.code == 409]">
                                <message-properties-transformer doc:name="set-http-status-409">
                                    <add-message-property key="http.status" value="400"/>
                                </message-properties-transformer>
                                <set-payload doc:name="set-payload" value="Duplicate"/>
                            </when>
                            <when expression="#[payload.code == 414]">
                                <message-properties-transformer doc:name="set-http-status-414">
                                    <add-message-property key="http.status" value="413"/>
                                </message-properties-transformer>
                                <set-payload doc:name="set-payload" value="Parameter message too large"/>
                            </when>
                            <when expression="#[payload.code == 423]">
                                <message-properties-transformer doc:name="set-http-status-423">
                                    <add-message-property key="http.status" value="400"/>
                                </message-properties-transformer>
                                <set-payload doc:name="set-payload" value="Not allowed send SMS with current clientId"/>
                            </when>
                            <otherwise>
                                <message-properties-transformer doc:name="set-http-status-on-otherwise">
                                    <add-message-property key="http.status" value="500"/>
                                </message-properties-transformer>
                                <set-payload value="Unknown remote service error" doc:name="set-payload"/>
                            </otherwise>
                        </choice>
                    </when>
                    <otherwise>
                        <message-properties-transformer doc:name="set-http-status-500">
                            <add-message-property key="http.status" value="500"/>
                        </message-properties-transformer>
                        <set-payload value="External service responded 500" doc:name="set-payload"/>
                    </otherwise>
                </choice>
            </otherwise>
        </choice>
    </flow>
</mule>
